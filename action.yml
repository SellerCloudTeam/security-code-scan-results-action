name: "SecurityCodeScan"
description: "Security Code Scan action to upload code scanning results"
branding:
  icon: "check-circle"
  color: "purple"
inputs:
  sarif_directory:
    description: The output directory where SARIF files should be collected.
    required: false
    default: "../results"
runs:
  using: "composite"
  steps:
    - name: Install sarif tool
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        # Install Sarif.Multitool globally
        dotnet tool install --global Sarif.Multitool --version 2.3.10

    - name: Convert sarif
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        # Patch .NET Core for Roll Forward
        #   Ref. https://stackoverflow.com/a/76688493
        $env:DOTNET_ROLL_FORWARD = "LatestMajor"

        # Define output directory
        $outputDir = "../results"
        if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir | Out-Null
        }

        # Purge directory contents
        Write-Host "Purging output folder $outputDir ..."

        Remove-Item -Path "$outputDir\*" -Recurse -Force

        # Create the convert.js file
        $convertJsContent = @"
        const fs = require('fs')

        var args = process.argv.slice(2);

        var sarif = JSON.parse(fs.readFileSync(args[0], "utf8"));

        for (run of sarif.runs) {
          run.tool.driver.name = "SecurityCodeScan";
          run.tool.driver.fullName  = "Vulnerability Patterns Detector for C# and VB.NET";
          run.tool.driver.informationUri  = "https://security-code-scan.github.io";

          run.results = run.results.filter((e => e.ruleId.startsWith("SCS")));

          if (run.tool.driver.rules) {
            run.tool.driver.rules = run.tool.driver.rules.filter((e => e.id.startsWith("SCS")));
          }

          for (let i = 0; i < run.results.length; ++i) {
            run.results[i].ruleIndex = undefined;
            run.results[i].relatedLocations = undefined;

            if (run.results[i].locations === undefined) {
              const match = run.results[i].message.text.match(/(.*) in (.*)\((\d+)\)(:.*)/);
              run.results[i].message.text = match[1];
              run.results[i].locations = [{
                "physicalLocation" : {
                  "artifactLocation" : {
                    "uri" : "file:///" + match[2].replace(/\\\\/g, "/")
                  },
                  "region" : {
                    "startLine": Number(match[3]),
                    "startColumn": 1,
                    "endLine": Number(match[3]),
                    "endColumn": 1
                  }
                }
              }];
            }
          }

          if (run.tool.driver.rules) {
            for (rule of run.tool.driver.rules) {
              rule.shortDescription = undefined;
              rule.help = { "text" : rule.helpUri};
            }
          }

          run.language = undefined;
        }

        var converted = JSON.stringify(sarif, null, 2);
        fs.writeFileSync(args[1], converted);
        "@

        $convertJsPath = "convert.js"
        Set-Content -Path $convertJsPath -Value $convertJsContent

        # Initialize the counter
        $i = 0

        # Process each .sarif file found in the current directory and its subdirectories
        Get-ChildItem -Path "." -Filter "*.sarif" -Recurse | ForEach-Object {
            $sarifFile = $_.FullName
            $transformedSarifFile = "$($_.FullName).transformed"
            $convertedSarifFile = "$($_.FullName).converted"

            if (! (Get-Content $sarifFile) ) {
              Write-Host "Skipping empty file $sarifFile ..."

              return
            }

            # Transform the SARIF file
            Write-Host "Transforming SARIF file $sarifFile ..."

            sarif transform "$sarifFile" --output "$transformedSarifFile" -f --sarif-output-version Current

            if ($LASTEXITCODE -ne 0) {
                throw "Failed to transform SARIF file using sarif dotnet tool: $sarifFile"
            }

            # Run the convert.js script on the SARIF file
            Write-Host "Converting SARIF file $transformedSarifFile ..."

            node $convertJsPath $transformedSarifFile $convertedSarifFile

            if ($LASTEXITCODE -ne 0) {
                throw "Failed to convert SARIF file using NodeJS script convert.js: $transformedSarifFile"
            }

            # Move the processed SARIF file to the output directory
            $newFileName = "{0}.sarif" -f $i
            $destSarifFile = Join-Path -Path $outputDir -ChildPath $newFileName

            Write-Host "Moving $convertedSarifFile to $destSarifFile ..."

            Move-Item -Path $convertedSarifFile -Destination $destSarifFile

            # Increment the counter
            $i++
        }
